<Container>
1. 서버의 한 종류

2. 서버에서 프로그램을 실행하기 위한 가상화 기술.

3. vm의 진화된 버전이라고 생각하면 쉬움.

4. 서버 내에서 쪼개지는 단위 하나를 컨테이너로 보면 되는데 컨테이너는 환경이 구축된 상태로 끼웠다 뺐다할 수 있는 편의성 있음.





<Doker>
1. 컨테이너를 관리해주는 관리자(프로그램).

2. 즉 서버 하나에 도커 하나라고 생각하면 됨.
    즉, 건물(서버)하나에 관리자(도커)하나가 붙는다.

3. 프로그램 실행에 필요한 코드, 라이브러리, 환경을 한번에 패키징

4. 어디서 실행하든 똑같이 돌아가는 환경을 만들 수 있음.





<Kubernetes>
1. 도커가 실행중인 여러개의 서버를 관리하기 위한 도구.





<도커 이미지>
1. 컨테이너를 실행하기 위해서는 어떤 OS를 쓸지, 프로그램(java, python등)을 쓸지, 실행할 파일을 뭔지 등의 미리 정의된 정보가 필요.

2. 그 미리 정의된 설계도가 이미지다.

3. 즉, 실행 가능한 컨테이너를 만들기위한 정적인 템플릿.

4. 도커 파일을 빌드하면 이미지가 생성. 이미지를 생성하면 컨테이너가 만들어져서 실행됨.





<레지스트리>
1. 도커 이미지파일을 저장하고 관리하는 장소.

2. 개발자가 만든 도커 이미지를 다른 사람과 공유하거나 운영서버에 배포할 때 사용하기 위해 올려놓는 창고.

3. 실제 실행 컨테이너가 아닌 빌드파일은 이미지를 관리하는 저장소.






<실제 흐름>
1. 개발자가 Doker로 앱을 컨테이너로 만듬.

2. 만든 이미지를 레지스트리에 푸시.

3. 운영팀이 Kubernetes로 여러 서버에 자동 배포하고 운영.

